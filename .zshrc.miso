# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  zsh-syntax-highlighting
  zsh-autosuggestions
  fzf
  asdf
  kubectl # kubectx
  kube-ps1
)

source $ZSH/oh-my-zsh.sh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias ll="ls -alh"
alias e='exit'
alias c='clear'

# eval "$(/opt/homebrew/bin/brew shellenv)"

# kubernetes
alias k="kubectl"
alias ksr='k --sort-by=.metadata.creationTimestamp'
alias kn='k neat'
alias ks='kubectl-slice'
# kubectl-slice -f cert-manager.yaml -t "{{.kind}}.yaml" -o cert-manager

# PROMPT='$(kube_ps1)'$PROMPT # or RPROMPT='$(kube_ps1)'

## kubectl (wrapper + completion reuse)
# Pretty diff / editor
export KUBECTL_EXTERNAL_DIFF="colordiff -N -u"   # brew install colordiff
export KUBE_EDITOR=/usr/bin/vim

# Resolve real kubectl binary (prefer binary path, not alias/function)
KUBECTL_BIN="${KUBECTL_BIN:-$(command -v kubectl)}"

# ---- Color toggle (NO_COLOR / KUBECTL_NO_COLOR / FORCE) ----
export KUBECTL_FORCE_COLOR=1
if [ -n "${KUBECTL_FORCE_COLOR:-}" ]; then
  RED="\033[31m"; YEL="\033[33m"; CYN="\033[36m"; GRN="\033[32m"; BLU="\033[34m"; MAG="\033[35m"; RST="\033[0m"
elif [ -n "${NO_COLOR:-${KUBECTL_NO_COLOR:-}}" ] || ! [ -t 2 ]; then
  RED=""; YEL=""; CYN=""; GRN=""; BLU=""; MAG=""; RST=""
else
  RED="\033[31m"; YEL="\033[33m"; CYN="\033[36m"; GRN="\033[32m"; BLU="\033[34m"; MAG="\033[35m"; RST="\033[0m"
fi

# Wrapper: prompt when user runs kubectl directly in interactive shell
kubectl() {
  # Bypass for internal calls (kapply/kdelete) or completion engine
  if [ -n "${KUBECTL_WRAPPER_BYPASS:-}" ] || [ "$1" = "__complete" ] || [ -n "${COMP_LINE:-}" ]; then
    command "$KUBECTL_BIN" "$@"
    return $?
  fi

  # ---- FAST META (single kubectl call) ----
  # All temps are local to avoid leaking into the user shell.
  local context cluster namespace
  local __kcfg_json __kcfg_raw

  if command -v jq >/dev/null 2>&1; then
    __kcfg_json=$(command "$KUBECTL_BIN" config view --minify -o json 2>/dev/null)
    # Use jq to extract three fields in one go; fallback-safe (// "")
    context=$(jq -r '.contexts[0].name // ""' <<<"$__kcfg_json")
    cluster=$(jq -r '.contexts[0].context.cluster // ""' <<<"$__kcfg_json")
    namespace=$(jq -r '.contexts[0].context.namespace // ""' <<<"$__kcfg_json")
  else
    # Fallback without jq: still single kubectl call using JSONPath
    __kcfg_raw=$(
      command "$KUBECTL_BIN" config view --minify \
        -o jsonpath='{.contexts[0].context.cluster}{"\n"}{.contexts[0].context.namespace}{"\n"}{.contexts[0].name}{"\n"}' 2>/dev/null
    )
    # Split three lines into three locals (portable bash/zsh)
#     IFS=$'\n' read -r cluster namespace context <<'EOF'
# '"$__kcfg_raw"'
# EOF
    # 위의 히어문은 따옴표 보존 이슈가 있을 수 있으니, 문제가 되면 아래와 같이 간단히 바꿔도 됩니다:
    IFS=$'\n' read -r cluster namespace context <<<"$__kcfg_raw"
  fi

  # Defaults and rare fallbacks
  [ -z "$namespace" ] && namespace="default"
  if [ -z "$context" ]; then
    context=$(command "$KUBECTL_BIN" config current-context 2>/dev/null)
  fi

  # Header
  echo -e "${RED}[WARNING]${RST} You are running kubectl directly." >&2
  echo -e "${YEL}Recommended: use kapply / kdelete instead.${RST}" >&2
  echo -e "${CYN}Current Context:${RST} $context" >&2
  echo -e "${CYN}Cluster:${RST} $cluster" >&2
  echo -e "${CYN}Namespace:${RST} $namespace" >&2

  # Non-interactive safety: avoid blocking in CI/pipes
  if ! [ -t 0 ] && [ -z "${KUBECTL_ASSUME_YES:-}" ]; then
    echo -e "${RED}[DANGER]${RST} Non-interactive shell detected; refusing to prompt. Set KUBECTL_ASSUME_YES=1 to proceed." >&2
    return 1
  fi

  # Optional override to skip prompt (CI/automation)
  if [ -n "${KUBECTL_ASSUME_YES:-}" ]; then
    echo -e "${MAG}[auto]${RST} KUBECTL_ASSUME_YES=1 → continuing without prompt." >&2
    echo >&2
    command "$KUBECTL_BIN" "$@"
    return $?
  fi

  # Interactive prompt
  echo -n -e "${GRN}Are you sure you want to run kubectl? (y/N): ${RST}" >&2
  read -r confirm
  case "$confirm" in
    y|Y)
      echo >&2
      command "$KUBECTL_BIN" "$@"
      return $?
      ;;
    *)
      echo -e "${RED}Aborted.${RST}" >&2
      return 1
      ;;
  esac
}

kapply() {
  if [ -z "$1" ]; then
    echo -e "${RED}Usage: kapply [-f <file> | -k <kustomization-dir>]${RST}"
    return 1
  fi

  # Diff preview (kubectl exit: 0=no diff, 1=diff present, >1=error)
  local diff_output diff_status
  diff_output=$(KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" diff "$@" 2>&1)
  diff_status=$?

  if [ $diff_status -eq 0 ] && [ -z "$diff_output" ]; then
    echo -e "${GRN}No changes found. Nothing to apply.${RST}"; return 0
  elif [ $diff_status -gt 1 ]; then
    echo -e "${RED}Error running 'kubectl diff'. See details below:${RST}"
    echo "$diff_output"; return $diff_status
  fi

  echo "$diff_output"
  echo -e "${YEL}----------------------------------------\nDiff checking complete\n----------------------------------------${RST}"

  echo -n -e "${GRN}Apply changes? (y/N): ${RST}"
  read -r confirm
  case "$confirm" in
    y|Y) KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" apply "$@"; return $? ;;
    *)   echo -e "${RED}Aborted.${RST}"; return 1 ;;
  esac
}

kdelete() {
  if [ -z "$1" ]; then
    echo -e "${RED}Usage: kdelete [-f <file> | -k <kustomization-dir> | <type[/name]> ...]${RST}"
    return 1
  fi

  local targets_text rc
  targets_text=$(KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" delete "$@" \
    --dry-run=client -o name --ignore-not-found=true 2>&1)
  rc=$?

  if [ $rc -gt 0 ]; then
    echo -e "${RED}Error preparing delete preview. See details below:${RST}"
    echo "$targets_text"; return $rc
  fi

  if [ -z "$targets_text" ]; then
    echo -e "${GRN}No matching resources found. Nothing to delete.${RST}"
    return 0
  fi

  # List to array (bash/zsh)
  local -a targets=()
  while IFS= read -r line; do
    [ -n "$line" ] && targets+=("$line")
  done < <( printf '%s\n' "$targets_text" | sed -E '/^[[:space:]]*$/d' )

  echo -e "${YEL}The following resources will be deleted:${RST}"
  if ! KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" get "${targets[@]}" -o wide 2>/dev/null; then
    printf '%s\n' "${targets[@]}"
  fi
  echo -e "${YEL}----------------------------------------\nDelete preview complete\n----------------------------------------${RST}"

  echo -n -e "${GRN}Delete resources? (y/N): ${RST}"
  read -r confirm
  case "$confirm" in
    y|Y) KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" delete "$@"; return $? ;;
    *)   echo -e "${RED}Aborted.${RST}"; return 1 ;;
  esac
}

# ---------- (zsh only) Completion reuse for kapply/kdelete ----------
# Reuse oh-my-zsh kubectl completer if it's loaded.
if typeset -f _kubectl >/dev/null; then
  _kapply() {
    local -a _orig; _orig=("${words[@]}")
    local _cur=$CURRENT
    words=(kubectl apply "${_orig[2,-1]}")
    CURRENT=$(( _cur + 1 ))
    _kubectl
    words=("${_orig[@]}"); CURRENT=$_cur
  }
  compdef _kapply kapply

  _kdelete() {
    local -a _orig; _orig=("${words[@]}")
    local _cur=$CURRENT
    words=(kubectl delete "${_orig[2,-1]}")
    CURRENT=$(( _cur + 1 ))
    _kubectl
    words=("${_orig[@]}"); CURRENT=$_cur
  }
  compdef _kdelete kdelete
  compdef _kubectl kubectl
fi


# # Resolve real kubectl binary (prefer binary path, not alias/function)
# KUBECTL_BIN="${KUBECTL_BIN:-$(command -v kubectl)}"

# # Wrapper: prompt when user runs kubectl directly in interactive shell
# kubectl() {
#   # Bypass for internal calls (kapply/kdelete) or completion engine
#   if [ -n "${KUBECTL_WRAPPER_BYPASS:-}" ] || [ "$1" = "__complete" ] || [ -n "${COMP_LINE:-}" ]; then
#     command "$KUBECTL_BIN" "$@"
#     return $?
#   fi

#   local context cluster namespace
#   # context=$(command "$KUBECTL_BIN" config current-context 2>/dev/null)
#   # cluster=$(command "$KUBECTL_BIN" config view -o jsonpath='{.contexts[?(@.name=="'"$context"'")].context.cluster}' 2>/dev/null)
#   # namespace=$(command "$KUBECTL_BIN" config view -o jsonpath='{.contexts[?(@.name=="'"$context"'")].context.namespace}' 2>/dev/null)
#   context=$(command "$KUBECTL_BIN" config current-context 2>/dev/null)
#   cluster=$(command "$KUBECTL_BIN" config view --minify -o jsonpath='{.contexts[0].context.cluster}' 2>/dev/null)
#   namespace=$(command "$KUBECTL_BIN" config view --minify -o jsonpath='{.contexts[0].context.namespace}' 2>/dev/null)

#   if [ -z "$namespace" ]; then
#     namespace="default"
#   fi

#   echo -e "\033[31m[WARNING]\033[0m You are running kubectl directly." >&2
#   echo -e "\033[33mRecommended: use kapply / kdelete instead.\033[0m" >&2
#   echo -e "\033[36mCurrent Context:\033[0m $context" >&2
#   echo -e "\033[36mCluster:\033[0m $cluster" >&2
#   echo -e "\033[36mNamespace:\033[0m $namespace" >&2
#   echo -n -e "\033[32mAre you sure you want to run kubectl? (y/N): \033[0m" >&2

#   read -r confirm
#   case "$confirm" in
#     y|Y)
#       echo >&2
#       command "$KUBECTL_BIN" "$@"
#       ;;
#     *)
#       echo -e "\033[31mAborted.\033[0m" >&2
#       return 1
#       ;;
#   esac
# }

# kapply() {
#   if [ -z "$1" ]; then
#     echo -e "\033[31mUsage: kapply [-f <file> | -k <kustomization-dir>]\033[0m"
#     return 1
#   fi

#   # Diff preview (kubectl exit: 0=no diff, 1=diff present, >1=error)
#   diff_output=$(KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" diff "$@" 2>&1)
#   diff_status=$?

#   if [ $diff_status -eq 0 ] && [ -z "$diff_output" ]; then
#     echo -e "\033[32mNo changes found. Nothing to apply.\033[0m"; return 0
#   elif [ $diff_status -gt 1 ]; then
#     echo -e "\033[31mError running 'kubectl diff'. See details below:\033[0m"
#     echo "$diff_output"; return $diff_status
#   fi

#   echo "$diff_output"
#   echo -e "\033[33m----------------------------------------\nDiff checking complete\n----------------------------------------\033[0m"

#   echo -n -e "\033[32mApply changes? (y/N): \033[0m"
#   read -r confirm
#   case "$confirm" in
#     y|Y) KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" apply "$@" ;;
#     *)   echo -e "\033[31mAborted.\033[0m"; return 1 ;;
#   esac
# }

# kdelete() {
#   if [ -z "$1" ]; then
#     echo -e "\033[31mUsage: kdelete [-f <file> | -k <kustomization-dir> | <type[/name]> ...]\033[0m"
#     return 1
#   fi

#   # Identify targets safely (no real deletion)
#   targets_text=$(KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" delete "$@" \
#     --dry-run=client -o name --ignore-not-found=true 2>&1)
#   rc=$?

#   if [ $rc -gt 0 ]; then
#     echo -e "\033[31mError preparing delete preview. See details below:\033[0m"
#     echo "$targets_text"; return $rc
#   fi

#   if [ -z "$targets_text" ]; then
#     echo -e "\033[32mNo matching resources found. Nothing to delete.\033[0m"
#     return 0
#   fi

#   # Convert list to array (portable: bash/zsh)
#   targets=()
#   while IFS= read -r line; do
#     [ -n "$line" ] && targets+=("$line")
#   done < <( printf '%s\n' "$targets_text" | sed -E '/^[[:space:]]*$/d' )

#   echo -e "\033[33mThe following resources will be deleted:\033[0m"
#   # Wide preview first; fallback to names
#   if ! KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" get "${targets[@]}" -o wide 2>/dev/null; then
#     printf '%s\n' "${targets[@]}"
#   fi
#   echo -e "\033[33m----------------------------------------\nDelete preview complete\n----------------------------------------\033[0m"

#   echo -n -e "\033[32mDelete resources? (y/N): \033[0m"
#   read -r confirm
#   case "$confirm" in
#     y|Y) KUBECTL_WRAPPER_BYPASS=1 "$KUBECTL_BIN" delete "$@" ;;
#     *)   echo -e "\033[31mAborted.\033[0m"; return 1 ;;
#   esac
# }

# # ---------- Completion reuse for kapply/kdelete ----------
# # Reuse oh-my-zsh kubectl completer if it's loaded.
# if typeset -f _kubectl >/dev/null; then
#   # kapply → behave like: kubectl apply …
#   _kapply() {
#     local -a _orig; _orig=("${words[@]}")
#     local _cur=$CURRENT
#     words=(kubectl apply "${_orig[2,-1]}")
#     CURRENT=$(( _cur + 1 ))
#     _kubectl
#     words=("${_orig[@]}"); CURRENT=$_cur
#   }
#   compdef _kapply kapply

#   # kdelete → behave like: kubectl delete …
#   _kdelete() {
#     local -a _orig; _orig=("${words[@]}")
#     local _cur=$CURRENT
#     words=(kubectl delete "${_orig[2,-1]}")
#     CURRENT=$(( _cur + 1 ))
#     _kubectl
#     words=("${_orig[@]}"); CURRENT=$_cur
#   }
#   compdef _kdelete kdelete

#   # Ensure kubectl itself is bound (harmless if already set)
#   compdef _kubectl kubectl
# fi

# saml2aws
alias saml='saml2aws login --force --skip-prompt --mfa-token=$1'
eval "$(saml2aws --completion-script-zsh)"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# aws
complete -C '$(which aws_completer)' aws

# terraform
alias tf='terraform'
# terraform -install-autocomplete
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/homebrew/bin/terraform terraform
